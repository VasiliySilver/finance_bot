import json
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from bot.database.base import get_session
from bot.database.repository import Repository
from bot.utils.states import SettingsStates
from bot.keyboards.settings import (
    get_settings_keyboard,
    get_currency_keyboard,
    get_categories_management_keyboard
)
from datetime import datetime
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(F.data == "settings_currency")
async def show_currency_settings(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SettingsStates.setting_currency)
    await callback.message.edit_text(
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        reply_markup=get_currency_keyboard()
    )

@router.callback_query(SettingsStates.setting_currency)
async def process_currency_setting(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith("currency_"):
        currency = callback.data.split("_")[1]
        repo = callback.model.repository
        user = await repo.get_or_create_user(callback.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await repo.get_or_create_settings(user.id)
        settings.currency = currency
        await repo.save_settings(settings)
        
        await callback.message.edit_text(
            f"‚úÖ –í–∞–ª—é–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency}",
            reply_markup=get_settings_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "settings_categories")
async def show_categories_settings(callback: CallbackQuery, state: FSMContext):
    async for session in get_session():
        repo = Repository(session)
        user = await repo.get_or_create_user(callback.from_user.id)
        settings = await repo.get_or_create_settings(user.id)
        
        custom_categories = json.loads(settings.custom_categories or '[]')
        
        await callback.message.edit_text(
            "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ:",
            reply_markup=get_categories_management_keyboard(custom_categories)
        )

@router.callback_query(F.data == "add_category")
async def start_category_adding(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SettingsStates.adding_category)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )

@router.message(SettingsStates.adding_category)
async def process_new_category(message: Message, state: FSMContext):
    new_category = message.text.strip()
    
    async for session in get_session():  # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        repo = Repository(session)  # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        user = await repo.get_or_create_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await repo.get_or_create_settings(user.id)  # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        
        custom_categories = json.loads(settings.custom_categories or '[]')
        if new_category not in custom_categories:
            custom_categories.append(new_category)
            settings.custom_categories = json.dumps(custom_categories)
            await repo.save_settings(settings)
        
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{new_category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=get_categories_management_keyboard(custom_categories)
        )
        await state.clear()

@router.callback_query(F.data == "settings_notifications")
async def show_notification_settings(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SettingsStates.setting_notification)
    await callback.message.edit_text(
        "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):"
    )

@router.message(SettingsStates.setting_notification)
async def process_notification_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        datetime.strptime(time_str, "%H:%M")
        
        async for session in get_session():  # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
            repo = Repository(session)  # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            user = await repo.get_or_create_user(message.from_user.id)
            settings = await repo.get_or_create_settings(user.id)
            
            settings.notification_time = time_str
            await repo.save_settings(settings)
            
            await message.answer(
                f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}.",
                reply_markup=get_settings_keyboard()
            )
            await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.") 